package sudoku;

import org.junit.Assert;
import org.junit.Test;

public class SolveSudoku {

    @Test
    public void solveSudoku1() {
        solve(new Solution1(), 0);
        solve(new Solution1(), 1);
    }

    @Test
    public void solveSudoku2() {
        solve(new Solution2(), 0);
        solve(new Solution2(), 1);
    }

    private void solve(Solution s, int num) {
        var sample = board(num);
        var board = sample[0];
        var expected = sample[1];
        s.solveSudoku(board);
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                char c = board[row][col];
                System.out.print(c + ", ");
            }
            System.out.println();
        }
        Assert.assertArrayEquals(expected, board);

        var repeat = 10;
        char[][][] boards = new char[repeat][][];
        for (int i = 0; i < repeat; i++) {
            boards[i] = board(num)[0];
        }
        var start = System.nanoTime();
        for (int i = 0; i < 10; i++) {
            s.solveSudoku(boards[i]);
        }
        var time = System.nanoTime() - start;
        Assert.assertArrayEquals(expected, boards[0]);
        System.out.println("Time: " + time / 1000000.0 / repeat);
    }

    private char[][][] board(int i) {
        if (i == 0) return new char[][][]{
                {
                        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
                },
                {
                        {'5', '3', '4', '6', '7', '8', '9', '1', '2'},
                        {'6', '7', '2', '1', '9', '5', '3', '4', '8'},
                        {'1', '9', '8', '3', '4', '2', '5', '6', '7'},
                        {'8', '5', '9', '7', '6', '1', '4', '2', '3'},
                        {'4', '2', '6', '8', '5', '3', '7', '9', '1'},
                        {'7', '1', '3', '9', '2', '4', '8', '5', '6'},
                        {'9', '6', '1', '5', '3', '7', '2', '8', '4'},
                        {'2', '8', '7', '4', '1', '9', '6', '3', '5'},
                        {'3', '4', '5', '2', '8', '6', '1', '7', '9'}
                }
        };
        else return new char[][][]{
                {
                        {'.', '.', '9', '7', '4', '8', '.', '.', '.'},
                        {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
                        {'.', '2', '.', '1', '.', '9', '.', '.', '.'},
                        {'.', '.', '7', '.', '.', '.', '2', '4', '.'},
                        {'.', '6', '4', '.', '1', '.', '5', '9', '.'},
                        {'.', '9', '8', '.', '.', '.', '3', '.', '.'},
                        {'.', '.', '.', '8', '.', '3', '.', '2', '.'},
                        {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
                        {'.', '.', '.', '2', '7', '5', '9', '.', '.'}
                },
                {
                        {'5', '1', '9', '7', '4', '8', '6', '3', '2'},
                        {'7', '8', '3', '6', '5', '2', '4', '1', '9'},
                        {'4', '2', '6', '1', '3', '9', '8', '7', '5'},
                        {'3', '5', '7', '9', '8', '6', '2', '4', '1'},
                        {'2', '6', '4', '3', '1', '7', '5', '9', '8'},
                        {'1', '9', '8', '5', '2', '4', '3', '6', '7'},
                        {'9', '7', '5', '8', '6', '3', '1', '2', '4'},
                        {'8', '3', '2', '4', '9', '1', '7', '5', '6'},
                        {'6', '4', '1', '2', '7', '5', '9', '8', '3'}
                }
        };
    }
}
